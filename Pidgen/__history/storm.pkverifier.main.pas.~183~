{*************************************************************************
* Copyright (C) 2010 stOrM! - All Rights Reserved                       *
*                                                                       *
* This file is part of pkverifier.                                      *
*   1979645695                                                                   *
*                                                                       *
* This Source Code Form is subject to the terms of the Mozilla Public   *
* License, v. 2.0. If a copy of the MPL was not distributed with this   *
* file, You can obtain one at https://mozilla.org/MPL/2.0/.             *
*                                                                       *
*************************************************************************}

unit storm.pkverifier.main;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls, Vcl.Mask,

  storm.pkverifier.thrd;

type
  TMainForm = class(TForm)
    btnClose: TButton;
    Label1: TLabel;
    pg: TPageControl;
    tsAuto: TTabSheet;
    gpInfo: TGroupBox;
    log: TMemo;
    btnStart: TButton;
    tsManuell: TTabSheet;
    GroupBox1: TGroupBox;
    Label2: TLabel;
    lbPidgenPath: TLabel;
    lbConfigKey: TLabel;
    lbLicenceKey: TLabel;
    lbMPCID: TLabel;
    log2: TMemo;
    edtPidgenPath: TEdit;
    edtKeyConfPath: TEdit;
    edttMCPID: TEdit;
    btnPidgenPath: TButton;
    btnKeyConfPath: TButton;
    edtLicence: TMaskEdit;
    FO: TFileOpenDialog;
    btnStartman: TButton;
    pb: TProgressBar;
    procedure btnStartClick(Sender: TObject);
    procedure btnCloseClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure btnPidgenPathClick(Sender: TObject);
    procedure btnKeyConfPathClick(Sender: TObject);
    procedure btnStartmanClick(Sender: TObject);
    procedure tsManuellShow(Sender: TObject);
    procedure tsAutoShow(Sender: TObject);
  private
    AllowToClose: Boolean;
    procedure DoProgress;
    procedure VerifyLicence(const ALicenceKey: string = ''; const AMCPiD: string = '';
      const APidgenxDllPath: string = ''; const APKeyConfigPath: string = ''; AAutomatic: boolean = False;
      ALog: TMemo = nil);
    procedure OnKeyValidation(Sender: TObject);
    procedure OnKeyValidationDone(Sender: TObject);
    procedure OnKeyValidationStatus(Sender: TObject; const AMessageStr: string);
  public
    { Public-Deklarationen }
  end;

var
  MainForm: TMainForm;

implementation

{$R *.dfm}
{
uses

    Vcl.Styles.Utils,
    Vcl.Styles.Hooks,
    Vcl.Styles.Utils.Menus,
    Vcl.Styles.Utils.Forms,
    Vcl.Styles.Utils.StdCtrls,
    Vcl.Styles.Utils.ComCtrls,
    Vcl.Styles.Utils.ScreenTips,
    Vcl.Styles.Utils.SysControls,
    Vcl.Styles.Utils.SysStyleHook;
}

{ TMainForm }

procedure TMainForm.btnCloseClick(Sender: TObject);
begin
  close;
end;

procedure TMainForm.btnStartClick(Sender: TObject);
begin
  VerifyLicence('', '', '', '', true, Log);
end;

procedure TMainForm.btnStartmanClick(Sender: TObject);
begin
  VerifyLicence(edtLicence.Text, edttMCPID.Text, ExtractFilePath(edtPidgenPath.Text),
    edtKeyConfPath.Text, False, log2);
end;

procedure TMainForm.btnKeyConfPathClick(Sender: TObject);
begin
  fo.Options := [fdoPickFolders];
  if fo.Execute then
  begin
    // usually windows\system32\spp\tokens\pkeyconfig\pkeyconfig.xrm-ms
    edtKeyConfPath.Text :=  IncludeTrailingPathDelimiter(fo.filename) + 'pkeyconfig.xrm-ms';
  end;
end;

procedure TMainForm.btnPidgenPathClick(Sender: TObject);
begin
  fo.Options := [fdoPickFolders];
  if fo.Execute then
  begin
    // usually windows\system32\pidgenx.dll
    edtPidgenPath.Text :=  ExtractFilePath(IncludeTrailingPathDelimiter(fo.filename) + 'pidgenx.dll');
  end;
end;

procedure TMainForm.DoProgress;
begin
  pb.Style := pbstMarquee;
  pb.Visible := True;
end;

procedure TMainForm.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  if not AllowToClose then
   Action := TCloseAction.caNone;
end;

procedure TMainForm.FormCreate(Sender: TObject);
begin
  AllowToClose := True;
  pb.Visible := False;
  UseLatestCommonDialogs := True;
end;

procedure TMainForm.OnKeyValidationStatus(Sender: TObject;
  const AMessageStr: string);
begin
  case tsAuto.Visible of
    true:
    begin
      log2.Clear;
      log.Lines.Add(Format('%s', [AMessageStr]));
    end;
    false:
    begin
      log.Clear;
      log2.Lines.Add(Format('%s', [AMessageStr]));
    end;
  end;
end;

procedure TMainForm.tsAutoShow(Sender: TObject);
begin
  tsManuell.Visible := false;
  tsAuto.Visible := true
end;

procedure TMainForm.tsManuellShow(Sender: TObject);
begin
  tsAuto.Visible := false;
  tsManuell.Visible := true;
end;

procedure TMainForm.OnKeyValidation(Sender: TObject);
begin
  case tsAuto.Visible of
    true:
    begin
      log2.Clear;
      log.Lines.Add('validating licence, please wait...');
      btnStart.Enabled := False;
      btnClose.Enabled := False;
      AllowToClose := False;
    end;
    false:
    begin
      log.Clear;
      log2.Lines.Add('validating licence, please wait...');
      AllowToClose := False;
      btnClose.Enabled := False;
      btnStartman.Enabled := False;
      DoProgress;
    end;
  end;
end;

procedure TMainForm.OnKeyValidationDone(Sender: TObject);
begin
  case tsAuto.Visible of
    true:
    begin
      log2.Clear;
      log.Lines.Add('validation process, done...');
      btnStart.Enabled := True;
      btnClose.Enabled := True;
      AllowToClose := True;
    end;
    false:
    begin
      log.Clear;
      log2.Lines.Add('validation process, done...');
      pb.Visible := False;
      btnClose.Enabled := True;
      AllowToClose := True;
      btnStartman.Enabled := True;
    end;
  end;
end;

procedure TMainForm.VerifyLicence(const ALicenceKey: string;
  const AMCPiD: string; const APidgenxDllPath: string;
  const APKeyConfigPath: string; AAutomatic: Boolean;
  ALog: TMemo);
var
  AVerifier: TPkVerifier;
begin
  AVerifier := TPkVerifier.Create;
  AVerifier.OnKeyValidation := OnKeyValidation;
  AVerifier.OnKeyValidationDone := OnKeyValidationDone;
  AVerifier.OnKeyValidationError := OnKeyValidationStatus;

  ALog.Lines.BeginUpdate;
  ALog.Lines.Clear;
  ALog.Lines.EndUpdate;

  // should verify that all needed params are not empty and valid...

  case AAutomatic of
    true:
      begin
        try
          Alog.Lines.BeginUpdate;
          Alog.Lines.Add(Format('MPCID: %s', [AVerifier.MPCID]));
          Alog.Lines.Add(Format('Product ID: %s', [AVerifier.PID]));
          Alog.Lines.Add(Format('Licence Key: %s', [AVerifier.LicenceKey]));
          Alog.Lines.Add(Format('System Path: %s', [AVerifier.PidgenXPath]));
          Alog.Lines.EndUpdate;
          AVerifier.Verify(
            AVerifier.PidgenXPath,
            AVerifier.LicenceKey,
            AVerifier.PidgenXPath + 'spp\tokens\pkeyconfig\pkeyconfig.xrm-ms',
            AVerifier.MPCID,
            false
            );
        finally
          if AVerifier.Genuine.ContainsKey('storm') then
          begin
            Alog.Lines.BeginUpdate;
            Alog.Lines.Add('-----------------------------------------------------------------------------------------------------------------------------');
            Alog.Lines.Add(Format('Generated PID: %s', [AVerifier.Genuine.Items['storm'].FGeneratedPid_PID]));
            Alog.Lines.Add(Format('Crypt ID: %s', [AVerifier.Genuine.Items['storm'].FDigitalPidId_CryptoID]));
            Alog.Lines.Add(Format('Activation ID: %s', [AVerifier.Genuine.Items['storm'].FDigitalPidId4_Activationid]));
            Alog.Lines.Add(Format('Edition: %s', [AVerifier.Genuine.Items['storm'].FDigitalPidId4_Edition]));
            Alog.Lines.Add(Format('Edition ID: %s', [AVerifier.Genuine.Items['storm'].FDigitalPidId4_EditionId]));
            Alog.Lines.Add(Format('Extended PID: %s', [AVerifier.Genuine.Items['storm'].FDigitalPidId4_ExtendedPid]));
            Alog.Lines.Add(Format('Licence Type: %s', [AVerifier.Genuine.Items['storm'].FDigitalPidId4_LicenseType]));
            Alog.Lines.Add(Format('Licence Channel: %s', [AVerifier.Genuine.Items['storm'].FDigitalPidId4_LicenseChannel]));
            Alog.Lines.Add('------------------------------------------------------------------------------------------------------------------------------');
            Alog.Lines.Add('Encrypted Licence Key:');
            Alog.Lines.Add(AVerifier.Genuine.Items['storm'].FEncryptedKey);
            Alog.Lines.Add('------------------------------------------------------------------------------------------------------------------------------');
            Alog.Lines.EndUpdate;
          end;
           FreeAndNil(AVerifier);
        end;
      end;
    false:
    begin
      try
        AVerifier.Verify(
          edtPidgenPath.Text,
          edtLicence.Text,
          edtKeyConfPath.Text,
          edttMCPID.Text,
          true);
      finally
        FreeAndNil(AVerifier);
      end;
    end;
  end;
end;

end.
